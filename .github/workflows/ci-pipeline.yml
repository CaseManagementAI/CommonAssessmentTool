name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'app/clients/**'  # Ignore all changes in the 'clients' directory
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'app/clients/**'  # Ignore all changes in the 'clients' directory

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt  # Install dependencies directly

      - name: Install Pylint
        run: |
          pip install pylint  # Install pylint globally in the current environment

      - name: Run Pylint and Save Report
        run: |
          pylint app/ --ignore=clients || true  # Continue even if pylint fails
          pylint app/ --ignore=clients > pylint-report.txt  # Save the report to a file

      - name: Upload Pylint Report
        uses: actions/upload-artifact@v3
        with:
          name: pylint-report
          path: pylint-report.txt

      - name: Generate Workflow Summary
        run: |
          echo "## Pylint Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat pylint-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-latest
    needs: lint  # Ensure the lint job runs first

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        run: docker build -t my_project_image .

      - name: Run Docker Container
        run: |
          docker run -d -p 5000:5000 my_project_image
          sleep 10  # Wait for the container to start

      - name: Test Docker Container
        run: |
          curl http://localhost:5000 || exit 1  # Test if the container is running properly

      - name: Cleanup Docker Containers
        run: |
          docker stop $(docker ps -q)  # Stop all running containers
          docker rm $(docker ps -a -q)  # Remove all containers