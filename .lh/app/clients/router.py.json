{
    "sourceFile": "app/clients/router.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1730875596606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730875608612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,6 +57,6 @@\n     return\n \n \n @router.get(\"/clients\", response_model=None, summary=\"Delete all clients\")\n-async def get_all_clients():\n+async def delete_all_clients():\n     return list(mock_clients_db.values())\n"
                },
                {
                    "date": 1730875707491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,12 @@\n \n \n @router.delete(\"/clients/{id}\", response_model=None, summary=\"Delete client by ID\")\n async def delete_client_by_id(id: int):\n-    client = mock_clients_db.get(id)\n+    client = mock_clients_db.pop(id, None)\n     if client is None:\n         raise HTTPException(status_code=404, detail=\"Client not found\")\n-    return\n+    return {\"message\": f\"Client with ID {id} deleted successfully.\"}\n \n \n @router.get(\"/clients\", response_model=None, summary=\"Delete all clients\")\n async def delete_all_clients():\n"
                },
                {
                    "date": 1730875735473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,5 +58,6 @@\n \n \n @router.get(\"/clients\", response_model=None, summary=\"Delete all clients\")\n async def delete_all_clients():\n-    return list(mock_clients_db.values())\n+    mock_clients_db.clear()\n+    return {\"message\": \"All clients deleted successfully.\"}\n"
                },
                {
                    "date": 1730875916113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,8 @@\n         raise HTTPException(status_code=404, detail=\"Client not found\")\n     return {\"message\": f\"Client with ID {id} deleted successfully.\"}\n \n \n-@router.get(\"/clients\", response_model=None, summary=\"Delete all clients\")\n+@router.delete(\"/clients\", response_model=None, summary=\"Delete all clients\")\n async def delete_all_clients():\n     mock_clients_db.clear()\n     return {\"message\": \"All clients deleted successfully.\"}\n"
                }
            ],
            "date": 1730875596606,
            "name": "Commit-0",
            "content": "from fastapi import APIRouter, HTTPException\nfrom fastapi.responses import HTMLResponse\nfrom typing import List\n\nfrom app.clients.service.logic import interpret_and_calculate\nfrom app.clients.schema import PredictionInput, Client\n\nrouter = APIRouter(prefix=\"/clients\", tags=[\"clients\"])\n\nmock_clients_db = {\n    1: Client(\n        id=1,\n        first_name=\"Amy\",\n        last_name=\"Doe\",\n        email=\"amy.doe@example.com\",\n        date_of_birth=\"1995-04-23\",\n        address=\"123 Main St, Springfield\",\n        phone=\"123-456-7890\"\n    ),\n    2: Client(\n        id=2,\n        first_name=\"Bob\",\n        last_name=\"Smith\",\n        email=\"bob.smith@example.com\",\n        date_of_birth=\"1999-08-17\",\n        address=\"456 Elm St, Springfield\",\n        phone=\"098-765-4321\"\n    ),\n}\n\n\n@router.post(\"/predictions\")\nasync def predict(data: PredictionInput):\n    print(\"HERE\")\n    print(data.model_dump())\n    return interpret_and_calculate(data.model_dump())\n\n\n@router.get(\"/clients/{id}\", response_model=Client, summary=\"Retrieve client by ID\")\nasync def get_client_by_id(id: int):\n    client = mock_clients_db.get(id)\n    if client is None:\n        raise HTTPException(status_code=404, detail=\"Client not found\")\n    return client\n\n\n@router.get(\"/clients\", response_model=List[Client], summary=\"Retrieve all clients\")\nasync def get_all_clients():\n    return list(mock_clients_db.values())\n\n\n@router.delete(\"/clients/{id}\", response_model=None, summary=\"Delete client by ID\")\nasync def delete_client_by_id(id: int):\n    client = mock_clients_db.get(id)\n    if client is None:\n        raise HTTPException(status_code=404, detail=\"Client not found\")\n    return\n\n\n@router.get(\"/clients\", response_model=None, summary=\"Delete all clients\")\nasync def get_all_clients():\n    return list(mock_clients_db.values())\n"
        }
    ]
}